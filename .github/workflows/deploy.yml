name: uas

on:
  push:
    branches:
      - "*"
jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: "Start build job"
        run: |
          echo "Starting the build job"
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Login to Dockerhub"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Build and push"
        run: |
          docker build -f Docker/dockerfile/app.Dockerfile -t app .
          docker build -f Docker/dockerfile/web_server.Dockerfile -t web_server .
          docker tag app ${{ secrets.DOCKERHUB_USERNAME}}/commerce-laravel
          docker tag web_server ${{ secrets.DOCKERHUB_USERNAME}}/commerce-laravel_server
          docker push ${{ secrets.DOCKERHUB_USERNAME}}/commerce-laravel
          docker push ${{ secrets.DOCKERHUB_USERNAME}}/commerce-laravel_server
      - name: "Write config"
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/oci_api_key.pem
          echo "${{secrets.OCI_KEY_PUBLIC}}" >> ~/.oci/oci_api_key_public.pem
      - name: "Install OCI CLI"
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL
      - name: "Fix Config File Permissions"
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/oci_api_key.pem
      - name: "Check Existing Instance"
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance list \
            --lifecycle-state RUNNING \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --display-name server-docker \
            --query "data [0].id" \
            --raw-output \
            )" >> $GITHUB_ENV
      - name: "Get Instance IP"
        run: |
          echo "INSTANCE_IP=$( \
            oci compute instance list-vnics \
            --instance-id ${{secrets.OCI_INSTANCE_OCID}} \
            --query 'data [0]."public-ip"' \
            --raw-output \
            )" >> $GITHUB_ENV
          echo Instance IP: ${{ env.INSTANCE_IP }}
      - name: "Wait for SSH"
        run: |
          while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
          sleep 5
          echo "SSH not available..."
          done; echo "SSH ready!"
      - name: "Deploy Deployment Configuration"
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.OCI_INSTANCE_KEY }}
          source: "docker-compose.yml"
          target: "./"

      - name: "Running Docker Compose"
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.INSTANCE_IP}}
          username: ubuntu
          key: ${{secrets.OCI_INSTANCE_KEY}}
          script: |
            sudo docker pull zidanshabira/commerce-laravel
            sudo docker pull zidanshabira/commerce-laravel_server
            sudo docker-compose up -d
            sudo docker exec app /bin/bash -c "php artisan key:generate"
            sudo docker exec app /bin/bash -c "echo 'DB_CONNECTION=${{ secrets.DB_CONNECTION }}' >> .env"
            sudo docker exec app /bin/bash -c "echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env"
            sudo docker exec app /bin/bash -c "echo 'DB_PORT=${{ secrets.DB_PORT }}' >> .env"
            sudo docker exec app /bin/bash -c "echo 'DB_DATABASE=${{ secrets.DB_DATABASE }}' >> .env"
            sudo docker exec app /bin/bash -c "echo 'DB_USERNAME=${{ secrets.DB_USERNAME }}' >> .env"
            sudo docker exec app /bin/bash -c "echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env"
            sudo docker exec app /bin/bash -c "echo 'DB_REDIS=cache' >> .env"
            sudo docker exec app /bin/bash -c "php artisan migrate:fresh --seed"
            sudo docker exec app /bin/bash -c "php artisan storage:link"
